import numpy as np

from common import Shape, Grid


def task_hunubul():
    return [
        Shape(id + 1, s)
        for id, s in enumerate(
            [
                [[1, 1, 1, 1, 1]],
                [[0, 0, 1, 0], [1, 1, 1, 1]],
                [[1]],
                [
                    [1, 1, 1, 1],
                    [1, 0, 0, 0],
                ],
                [
                    [0, 1, 0],
                    [1, 1, 1],
                    [0, 1, 0],
                ],
                [
                    [1, 1, 1],
                    [1, 0, 1],
                ],
                [
                    [0, 1, 1],
                    [1, 1, 1],
                ],
                [[0, 0, 1, 1], [1, 1, 1, 0]],
            ]
        )
    ], Grid(np.zeros((6, 6), dtype=np.uint8))


def task_interview():
    return [
        Shape(id + 1, s)
        for id, s in enumerate(
            [
                [[1, 0, 0], [1, 0, 0], [1, 1, 1], [1, 1, 1], [0, 1, 0]],
                [
                    [0, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1],
                    [0, 1, 1, 1, 1],
                    [0, 0, 0, 1, 1],
                ],
                [
                    [1, 1, 0, 1, 1],
                    [1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1],
                    [1, 1, 0, 0, 0],
                ],
                [
                    [0, 1, 0, 0, 0],
                    [0, 1, 0, 0, 0],
                    [0, 1, 0, 0, 0],
                    [1, 1, 1, 1, 1],
                ],
                [
                    [0, 1, 1],
                    [0, 1, 1],
                    [0, 1, 1],
                    [1, 1, 1],
                    [1, 1, 1],
                    [1, 1, 1],
                ],
            ]
        )
    ], Grid(np.zeros((10, 10), dtype=np.uint8))


def task_vojta_game_full():
    return [
        Shape(id + 1, s)
        for id, s in enumerate(
            [
                [[1, 1, 1], [1, 0, 0]],
                [[0, 1, 1], [1, 1, 0]],
                [[1, 1, 1], [1, 0, 1]],
                [
                    [1, 1, 1, 0],
                    [1, 0, 1, 1],
                ],
                [[0, 1, 0], [1, 1, 1], [0, 1, 0]],
                [[0, 1, 0], [0, 1, 0], [1, 1, 1]],
                [[1, 1, 1], [1, 1, 0]],
                [[0, 1, 1], [0, 1, 0], [1, 1, 0]],
                [[0, 1], [1, 1]],
                [[0, 0, 1], [0, 0, 1], [1, 1, 1]],
                [[1, 0, 0], [1, 1, 0], [0, 1, 1]],
                [[1, 1], [1, 1]],
                [[0, 1, 0], [1, 1, 1]],
                [[1, 1, 1, 1]],
            ]
        )
    ], Grid(np.zeros((8, 8), dtype=np.uint8))


def task_vojta_game_level1():
    return [
        Shape(id + 1, s)
        for id, s in enumerate(
            [
                [[1, 1, 1], [1, 0, 0]],
                [[0, 1, 1], [1, 1, 0]],
                [[1, 1, 1], [1, 0, 1]],
                [[0, 1, 0], [1, 1, 1], [0, 1, 0]],
                [[0, 1, 1], [0, 1, 0], [1, 1, 0]],
                [[0, 0, 1], [0, 0, 1], [1, 1, 1]],
                [[1, 0, 0], [1, 1, 0], [0, 1, 1]],
                [[1, 1], [1, 1]],
                [[1, 1, 1, 1]],
            ]
        )
    ], Grid(np.zeros((4, 9), dtype=np.uint8))


def task_vojta_game_level2():
    return [
        Shape(id + 1, s)
        for id, s in enumerate(
            [
                [
                    [1, 1, 1, 0],
                    [1, 0, 1, 1],
                ],
                [[0, 1, 0], [1, 1, 1], [0, 1, 0]],
                [[0, 1, 0], [0, 1, 0], [1, 1, 1]],
                [[1, 1, 1], [1, 1, 0]],
                [[0, 1], [1, 1]],
                [[1, 1], [1, 1]],
                [[0, 1, 0], [1, 1, 1]],
                [[1, 1, 1, 1]],
            ]
        )
    ], Grid(np.zeros((6, 6), dtype=np.uint8))


def task_simple():
    return [
        Shape(id + 1, s)
        for id, s in enumerate(
            [
                [[1, 1, 1], [0, 1, 0]],
                [
                    [1, 0, 1],
                    [1, 1, 1],
                ],
                [[1]],
                [[1]],
                [[1]],
            ]
        )
    ], Grid(np.zeros((3, 4), dtype=np.uint8))
